
@{
  Layout = null;
}

@Scripts.Render("~/bundles/vue")
@Scripts.Render("~/bundles/element")
@Scripts.Render("~/bundles/axios")
@Styles.Render("~/Content/elementcss")


<!DOCTYPE html>

<html>
<head>
  <meta name="viewport" content="width=device-width" />
  <title>安阳市人民警察训练学校在线考试系统</title>
  <link href="~/Static/css/default.css" rel="stylesheet" />
  <link href="~/Static/css/start-exam.css" rel="stylesheet" />
</head>
<body>
  <div id="app">
    <el-page-header @@back="goBack" content="考试界面" class="header"></el-page-header>
    <div>
      <el-card class="exam-card" v-loading="isLoading">
        <h2 class="title">{{ title }}</h2>
        <el-divider></el-divider>
        <div class="single-wrap">
          <ul>
            <li class="single-item" v-for="item,index in singles" :key="item.EsId">
              {{index + 1}}.
              <div v-html="item.SQTitle"></div>
              <el-radio-group v-model="item.ans">
                <el-radio :label="singleSort[index][0]">A. {{item[singleSort[index][0]]}}</el-radio>
                <el-radio :label="singleSort[index][1]">B. {{item[singleSort[index][1]]}}</el-radio>
                <el-radio :label="singleSort[index][2]">C. {{item[singleSort[index][2]]}}</el-radio>
                <el-radio :label="singleSort[index][3]">D. {{item[singleSort[index][3]]}}</el-radio>
              </el-radio-group>
            </li>
          </ul>
        </div>
      </el-card>
    </div>
  </div>
</body>
</html>

<script>
  new Vue({
    el: '#app',
    data: {
      start: null,
      end: null,
      isLoading: false,
      userName: '',
      partId: 0,
      title: '',
      fills: [],
      judgments: [],
      multiples: [],
      singles: [],
      singleAns: [],
      singleSort: []
    },
    methods: {
      goBack() {
        window.location.href = '/Home/Index';
      },
      // 验证是否可以参加考试
      doAuth() {
        var id = localStorage.getItem('id');
        axios.post('/StartExam/Auth', { id }).then(res => {
          var data = res.data;

          if (data.code === 1) {
            return this.$confirm(data.message, '提示', {
              confirmButtonText: '确定',
              type: 'error'
            }).then(() => {
              this.goBack();
            }).catch(() => {
              this.goBack();
            });
          }

          var current = new Date();
          var start = new Date(data.start);
          var end = new Date(data.end);
          console.log(data);
          if (current >= start && current <= end) {
            this.start = start;
            this.end = end;
            this.userName = data.name;
            this.partId = data.partId;

            this.getPaper();
          } else if (current < start) {
            return this.$confirm('当前考试未开始', '提示', {
              confirmButtonText: '确定',
              type: 'error'
            }).then(() => {
              this.goBack();
            }).catch(() => {
              this.goBack();
            });
          } else {
            return this.$confirm('当前考试已结束', '提示', {
              confirmButtonText: '确定',
              type: 'error'
            }).then(() => {
              this.goBack();
            }).catch(() => {
              this.goBack();
            });
          }
        });

      },
      // 检查是否登录
      checkUser() {
        var id = localStorage.getItem('id');

        if (id === null) {
          return this.$confirm("请登录", '提示', {
            confirmButtonText: '确定',
            type: 'error'
          }).then(() => {
            this.goBack();
          }).catch(() => {
            this.goBack();
          });
        }
      },
      // 获取试卷
      getPaper() {
        this.isLoading = true;
        var userId = localStorage.getItem('id');
        axios.post("/StartExam/CreateExamPaper", {
          partId: this.partId,
          userId,
        }).then(res => {
          this.isLoading = false;
          var data = res.data;
          this.title = data.title;
          this.singles = data.singles;
          this.multiples = data.multiples;
          this.judgments = data.judgments;
          this.fills = data.fills;

          this.setSingleSort();
        });
      },
      // 随机排序
      shuffle(arr) {
        var len = arr.length;
        for (var i = 0; i < len - 1; i++) {
          var index = parseInt(Math.random() * (len - i));
          var temp = arr[index];
          arr[index] = arr[len - i - 1];
          arr[len - i - 1] = temp;
        }
        return arr;
      },
      setSingleSort() {
        for (var i = 0; i < this.singles.length; i++) {
          this.singleSort.push(this.shuffle(['SQAns1', 'SQAns2', 'SQAns3', 'SQTrueAns']));
        }
      }
    },
    created() {
      this.checkUser();
      this.doAuth();
    }
  })
</script>
